// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/auth/login": {
            "post": {
                "description": "Authenticate user with static credentials and return JWT token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "User login",
                "parameters": [
                    {
                        "description": "Login credentials",
                        "name": "credentials",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/main.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Login successful",
                        "schema": {
                            "$ref": "#/definitions/main.LoginResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/main.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Invalid credentials",
                        "schema": {
                            "$ref": "#/definitions/main.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to generate token",
                        "schema": {
                            "$ref": "#/definitions/main.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/students": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get all student data",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Students"
                ],
                "summary": "Get all student",
                "responses": {
                    "200": {
                        "description": "Get students successful",
                        "schema": {
                            "$ref": "#/definitions/main.GetStudentsResponse"
                        }
                    },
                    "401": {
                        "description": "Authorization header required or Invalid token",
                        "schema": {
                            "$ref": "#/definitions/main.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/students/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get one student data",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Students"
                ],
                "summary": "Get one student",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Student id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Get student successful",
                        "schema": {
                            "$ref": "#/definitions/main.GetStudentResponse"
                        }
                    },
                    "400": {
                        "description": "Missing parameter",
                        "schema": {
                            "$ref": "#/definitions/main.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Authorization header required or Invalid token",
                        "schema": {
                            "$ref": "#/definitions/main.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Student not found",
                        "schema": {
                            "$ref": "#/definitions/main.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "main.ErrorResponse": {
            "description": "Error response",
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Invalid request body"
                },
                "status": {
                    "type": "integer",
                    "example": 1
                }
            }
        },
        "main.GetStudentResponse": {
            "description": "Get student response",
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/models.Student"
                },
                "message": {
                    "type": "string",
                    "example": "Get student successful!"
                },
                "status": {
                    "type": "integer",
                    "example": 200
                }
            }
        },
        "main.GetStudentsResponse": {
            "description": "Get students response",
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Student"
                    }
                },
                "message": {
                    "type": "string",
                    "example": "Get students successful!"
                },
                "status": {
                    "type": "integer",
                    "example": 200
                }
            }
        },
        "main.LoginData": {
            "description": "Login response data",
            "type": "object",
            "properties": {
                "token": {
                    "type": "string",
                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6Imx1dGhmaSIsImV4cCI6MTc1NTMzMTU5NiwiaWF0IjoxNzU1MjQ1MTk2fQ.7WktpMm0AyyfXUR5x68Om7Pps9uR1resDlh2bz9C_J8"
                }
            }
        },
        "main.LoginRequest": {
            "description": "Login request payload",
            "type": "object",
            "properties": {
                "password": {
                    "type": "string",
                    "example": "123"
                },
                "username": {
                    "type": "string",
                    "example": "luthfi"
                }
            }
        },
        "main.LoginResponse": {
            "description": "Login response",
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/main.LoginData"
                },
                "message": {
                    "type": "string",
                    "example": "Login successful!"
                },
                "status": {
                    "type": "integer",
                    "example": 200
                }
            }
        },
        "models.Student": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "major": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "nim": {
                    "type": "string"
                },
                "semester": {
                    "type": "integer"
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "description": "Type \"Bearer\" followed by a space and JWT token.",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:3000",
	BasePath:         "/api",
	Schemes:          []string{"http"},
	Title:            "Sistem Manajemen Mahasiswa",
	Description:      "Error response",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
