basePath: /api
definitions:
  models.CreateStudentRequest:
    description: Create student request
    properties:
      email:
        example: budi@example.com
        type: string
      major:
        example: Teknik Industri
        type: string
      name:
        example: Budi
        type: string
      nim:
        example: "2021003"
        type: string
      semester:
        example: 2
        type: integer
    type: object
  models.CreateStudentResponse:
    description: Create student response
    properties:
      data:
        $ref: '#/definitions/models.Student'
      message:
        example: Create student success!
        type: string
      success:
        example: true
        type: boolean
    type: object
  models.DeleteStudentResponse:
    description: Delete student response
    properties:
      data:
        $ref: '#/definitions/models.Student'
      message:
        example: Delete student success!
        type: string
      success:
        example: true
        type: boolean
    type: object
  models.ErrorResponse:
    description: Error response
    properties:
      message:
        example: Invalid request body
        type: string
      success:
        example: false
        type: boolean
    type: object
  models.GetProfileResponse:
    description: Get profile response
    properties:
      data:
        $ref: '#/definitions/models.ProfileData'
      message:
        example: Get profile success!
        type: string
      success:
        example: true
        type: boolean
    type: object
  models.GetStudentResponse:
    description: Get student response
    properties:
      data:
        $ref: '#/definitions/models.Student'
      message:
        example: Get student successful!
        type: string
      success:
        example: true
        type: boolean
    type: object
  models.GetStudentsResponse:
    description: Get students response
    properties:
      data:
        items:
          $ref: '#/definitions/models.Student'
        type: array
      message:
        example: Get students successful!
        type: string
      success:
        example: true
        type: boolean
    type: object
  models.LoginData:
    description: Login response data
    properties:
      token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6Imx1dGhmaSIsImV4cCI6MTc1NTMzMTU5NiwiaWF0IjoxNzU1MjQ1MTk2fQ.7WktpMm0AyyfXUR5x68Om7Pps9uR1resDlh2bz9C_J8
        type: string
    type: object
  models.LoginRequest:
    description: Login request payload
    properties:
      password:
        example: "123"
        type: string
      username:
        example: luthfi
        type: string
    type: object
  models.LoginResponse:
    description: Login response
    properties:
      data:
        $ref: '#/definitions/models.LoginData'
      message:
        example: Login successful!
        type: string
      success:
        example: true
        type: boolean
    type: object
  models.ProfileData:
    description: Get profile response data
    properties:
      id:
        type: integer
      role:
        type: string
      username:
        type: string
    type: object
  models.RegisterRequest:
    description: Register response data
    properties:
      password:
        example: "123"
        type: string
      username:
        example: luthfi
        type: string
    type: object
  models.RegisterResponse:
    description: Register response data
    properties:
      data:
        $ref: '#/definitions/models.LoginData'
      message:
        example: Login successful!
        type: string
      success:
        example: true
        type: boolean
    type: object
  models.Student:
    properties:
      email:
        example: luthfi@example.com
        type: string
      id:
        example: 1
        type: integer
      major:
        example: Computer Science
        type: string
      name:
        example: Luthfi
        type: string
      nim:
        example: "2021001"
        type: string
      semester:
        example: 1
        type: integer
    type: object
  models.UpdateStudentRequest:
    description: Update student request
    properties:
      email:
        example: luthfi@example.com
        type: string
      major:
        example: Computer Science
        type: string
      name:
        example: Luthfi Edited
        type: string
      nim:
        example: "2021001"
        type: string
      semester:
        example: 1
        type: integer
    type: object
  models.UpdateStudentResponse:
    description: Update student response
    properties:
      data:
        $ref: '#/definitions/models.Student'
      message:
        example: Update student success!
        type: string
      success:
        example: true
        type: boolean
    type: object
host: localhost:3000
info:
  contact: {}
  description: Sistem manajemen mahasiswa using Go Fiber
  title: Sistem Manajemen Mahasiswa
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate user with static credentials and return JWT token
      parameters:
      - description: Login credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/models.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Login successful
          schema:
            $ref: '#/definitions/models.LoginResponse'
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Invalid credentials
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Failed to generate token
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: User login
      tags:
      - Authentication
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register new user and return JWT token for auto login
      parameters:
      - description: Register credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/models.RegisterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Register successful
          schema:
            $ref: '#/definitions/models.RegisterResponse'
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Invalid credentials
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Failed to generate token
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: User register
      tags:
      - Authentication
  /profile:
    get:
      consumes:
      - application/json
      description: Get profile
      produces:
      - application/json
      responses:
        "200":
          description: Get profile successful
          schema:
            $ref: '#/definitions/models.GetProfileResponse'
        "401":
          description: Invalid credentials
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get profile
      tags:
      - Profile
  /students:
    get:
      consumes:
      - application/json
      description: Get all student data
      produces:
      - application/json
      responses:
        "200":
          description: Get students successful
          schema:
            $ref: '#/definitions/models.GetStudentsResponse'
        "401":
          description: Authorization header required or Invalid token
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all student
      tags:
      - Students
    post:
      consumes:
      - application/json
      description: Create student
      parameters:
      - description: Create student data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.CreateStudentRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Create student successful
          schema:
            $ref: '#/definitions/models.CreateStudentResponse'
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Invalid credentials
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create student
      tags:
      - Students
  /students/{id}:
    delete:
      consumes:
      - application/json
      description: Delete student
      parameters:
      - description: Student id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Update student successful
          schema:
            $ref: '#/definitions/models.DeleteStudentResponse'
        "401":
          description: Invalid credentials
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Student not found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete student
      tags:
      - Students
    get:
      consumes:
      - application/json
      description: Get one student data
      parameters:
      - description: Student id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Get student successful
          schema:
            $ref: '#/definitions/models.GetStudentResponse'
        "400":
          description: Missing parameter
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Authorization header required or Invalid token
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Student not found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get one student
      tags:
      - Students
    put:
      consumes:
      - application/json
      description: Update student
      parameters:
      - description: Student id
        in: path
        name: id
        required: true
        type: integer
      - description: Update student data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.UpdateStudentRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Update student successful
          schema:
            $ref: '#/definitions/models.UpdateStudentResponse'
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Invalid credentials
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Student not found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update student
      tags:
      - Students
schemes:
- http
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
